name: MaxMind GeoIP Database Update

on:
  workflow_dispatch: # Allow manual trigger
  schedule:
    - cron: '0 0 * * *'  # Run daily at 00:00 UTC

jobs:
  update-geoip:
    runs-on: ubuntu-latest
    name: 📥 Download MaxMind GeoIP Databases

    steps:
    - name: 📂 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GIT_TOKEN }}

    - name: 📁 Ensure Data Directory Exists
      run: mkdir -p Data

    - name: 📥 Download GeoLite2-Country Database (Official)
      env:
        MAXMIND_LICENSE_KEY: ${{ secrets.MAXMIND_LICENSE_KEY }}
      run: |
        echo "Downloading GeoLite2-Country.mmdb from MaxMind official API..."

        # MaxMind official download URL format
        DOWNLOAD_URL="https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-Country&license_key=${MAXMIND_LICENSE_KEY}&suffix=tar.gz"

        # Download and extract
        curl -L "${DOWNLOAD_URL}" -o GeoLite2-Country.tar.gz

        if [ ! -f GeoLite2-Country.tar.gz ]; then
          echo "❌ Failed to download GeoLite2-Country.tar.gz"
          exit 1
        fi

        # Validate response is actually gzip
        if ! file GeoLite2-Country.tar.gz | grep -q "gzip compressed"; then
          echo "❌ Downloaded file is not gzip format. Response content:"
          cat GeoLite2-Country.tar.gz
          rm -f GeoLite2-Country.tar.gz
          exit 1
        fi

        # Extract .mmdb file from tar.gz
        tar -xzf GeoLite2-Country.tar.gz --strip-components=1 --wildcards '*.mmdb'
        mv GeoLite2-Country.mmdb Data/
        rm -f GeoLite2-Country.tar.gz

        if [ -f Data/GeoLite2-Country.mmdb ]; then
          echo "✅ GeoLite2-Country.mmdb downloaded successfully"
          ls -lh Data/GeoLite2-Country.mmdb
        else
          echo "❌ Failed to extract GeoLite2-Country.mmdb"
          exit 1
        fi

    - name: 📥 Download GeoLite2-ASN Database (Official)
      env:
        MAXMIND_LICENSE_KEY: ${{ secrets.MAXMIND_LICENSE_KEY }}
      run: |
        echo "Downloading GeoLite2-ASN.mmdb from MaxMind official API..."

        # MaxMind official download URL format
        DOWNLOAD_URL="https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-ASN&license_key=${MAXMIND_LICENSE_KEY}&suffix=tar.gz"

        # Download and extract
        curl -L "${DOWNLOAD_URL}" -o GeoLite2-ASN.tar.gz

        if [ ! -f GeoLite2-ASN.tar.gz ]; then
          echo "❌ Failed to download GeoLite2-ASN.tar.gz"
          exit 1
        fi

        # Validate response is actually gzip
        if ! file GeoLite2-ASN.tar.gz | grep -q "gzip compressed"; then
          echo "❌ Downloaded file is not gzip format. Response content:"
          cat GeoLite2-ASN.tar.gz
          rm -f GeoLite2-ASN.tar.gz
          exit 1
        fi

        # Extract .mmdb file from tar.gz
        tar -xzf GeoLite2-ASN.tar.gz --strip-components=1 --wildcards '*.mmdb'
        mv GeoLite2-ASN.mmdb Data/
        rm -f GeoLite2-ASN.tar.gz

        if [ -f Data/GeoLite2-ASN.mmdb ]; then
          echo "✅ GeoLite2-ASN.mmdb downloaded successfully"
          ls -lh Data/GeoLite2-ASN.mmdb
        else
          echo "❌ Failed to extract GeoLite2-ASN.mmdb"
          exit 1
        fi

    - name: 📥 Download GeoIP2-Anonymous-IP (Fallback Mirror)
      run: |
        echo "Downloading GeoIP2-Anonymous-IP.mmdb from mirror..."
        echo "ℹ️ Note: Anonymous-IP database is not available in free GeoLite2"
        echo "ℹ️ Using community mirror as fallback"

        # Download from P3TERX mirror
        curl -L "https://github.com/P3TERX/GeoLite.mmdb/raw/download/GeoIP2-Anonymous-IP.mmdb" \
          -o Data/GeoIP2-Anonymous-IP.mmdb

        if [ -f Data/GeoIP2-Anonymous-IP.mmdb ]; then
          echo "✅ GeoIP2-Anonymous-IP.mmdb downloaded successfully"
          ls -lh Data/GeoIP2-Anonymous-IP.mmdb
        else
          echo "⚠️ GeoIP2-Anonymous-IP.mmdb download failed - skipping"
        fi

    - name: 📊 Verify Downloaded Files
      run: |
        echo "Verifying downloaded databases..."
        echo "📂 Data directory contents:"
        ls -lh Data/*.mmdb || echo "No .mmdb files found"

        echo ""
        echo "📈 File sizes:"
        [ -f Data/GeoLite2-Country.mmdb ] && du -h Data/GeoLite2-Country.mmdb || echo "❌ GeoLite2-Country.mmdb missing"
        [ -f Data/GeoLite2-ASN.mmdb ] && du -h Data/GeoLite2-ASN.mmdb || echo "❌ GeoLite2-ASN.mmdb missing"
        [ -f Data/GeoIP2-Anonymous-IP.mmdb ] && du -h Data/GeoIP2-Anonymous-IP.mmdb || echo "⚠️ GeoIP2-Anonymous-IP.mmdb missing"

        echo ""
        echo "📅 Last modified dates:"
        stat -c '%y %n' Data/*.mmdb 2>/dev/null || stat -f '%Sm %N' Data/*.mmdb 2>/dev/null || echo "Unable to stat files"

    - name: 📤 Commit and Push Changes
      if: ${{ success() }}
      run: |
        git config --global user.name "Github Actions"
        git config --global user.email "actions@github.com"

        # Add the downloaded databases
        git add Data/GeoLite2-Country.mmdb
        git add Data/GeoLite2-ASN.mmdb
        git add Data/GeoIP2-Anonymous-IP.mmdb 2>/dev/null || true

        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "ℹ️ No changes to commit - databases are up to date"
        else
          git commit -m "🗺️ Update MaxMind GeoIP databases"
          git push origin main
          echo "✅ Successfully updated GeoIP databases"
        fi
      shell: bash