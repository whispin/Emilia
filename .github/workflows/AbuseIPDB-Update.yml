name: AbuseIPDB Blacklist Update

on:
  workflow_dispatch: # Allow manual trigger
  schedule:
    - cron: '30 5,11,17,23 * * *'  # Run at 5:30, 11:30, 17:30, 23:30 UTC daily

jobs:
  update-blacklist:
    runs-on: ubuntu-latest
    name: üì• Download AbuseIPDB Blacklist

    steps:
    - name: üìÇ Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GIT_TOKEN }}

    - name: üìÅ Ensure Data Directory Exists
      run: mkdir -p Data

    - name: üì• Download AbuseIPDB Blacklist (Multi-Key Retry)
      env:
        ABUSEIPDB_API_KEYS: ${{ secrets.ABUSEIPDB_API_KEYS }}
      run: |
        echo "Downloading AbuseIPDB blacklist (confidence >= 75%)..."
        echo "Using multi-key retry strategy for free tier limits"

        # AbuseIPDB API endpoint
        API_URL="https://api.abuseipdb.com/api/v2/blacklist"

        # Parse comma-separated API keys
        if [ -z "$ABUSEIPDB_API_KEYS" ]; then
          echo "‚ùå No API keys configured. Please set ABUSEIPDB_API_KEYS secret"
          echo "   Format: key1,key2,key3 (comma-separated)"
          exit 1
        fi

        # Split API keys by comma into array
        IFS=',' read -ra API_KEYS <<< "$ABUSEIPDB_API_KEYS"

        # Trim whitespace from each key
        for i in "${!API_KEYS[@]}"; do
          API_KEYS[$i]=$(echo "${API_KEYS[$i]}" | xargs)
        done

        if [ ${#API_KEYS[@]} -eq 0 ]; then
          echo "‚ùå No valid API keys found after parsing"
          exit 1
        fi

        echo "‚ÑπÔ∏è Found ${#API_KEYS[@]} API key(s) configured"

        # Try each API key until one succeeds
        SUCCESS=false
        for i in "${!API_KEYS[@]}"; do
          KEY_NUM=$((i + 1))
          API_KEY="${API_KEYS[$i]}"

          echo ""
          echo "üîÑ Attempt $KEY_NUM/${#API_KEYS[@]} - Using API Key #$KEY_NUM"

          # Download with current API key
          HTTP_CODE=$(curl -G "${API_URL}" \
            -H "Key: ${API_KEY}" \
            -H "Accept: text/plain" \
            -d confidenceMinimum=75 \
            -d limit=10000 \
            -w "%{http_code}" \
            -o abuseipdb_raw.csv \
            -s)

          echo "   HTTP Status: $HTTP_CODE"

          # Check HTTP status code
          if [ "$HTTP_CODE" != "200" ]; then
            echo "   ‚ö†Ô∏è API Key #$KEY_NUM failed with HTTP $HTTP_CODE"

            # Show error message if available
            if [ -f abuseipdb_raw.csv ] && [ -s abuseipdb_raw.csv ]; then
              echo "   Error message:"
              head -3 abuseipdb_raw.csv | sed 's/^/      /'
            fi

            rm -f abuseipdb_raw.csv
            continue
          fi

          # Verify file exists and has content
          if [ ! -f abuseipdb_raw.csv ] || [ ! -s abuseipdb_raw.csv ]; then
            echo "   ‚ö†Ô∏è API Key #$KEY_NUM: Downloaded file is empty or missing"
            rm -f abuseipdb_raw.csv
            continue
          fi

          # Verify CSV format (should contain IP addresses)
          if ! head -5 abuseipdb_raw.csv | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+'; then
            echo "   ‚ö†Ô∏è API Key #$KEY_NUM: Invalid CSV format (no IP addresses found)"
            echo "   First 3 lines:"
            head -3 abuseipdb_raw.csv | sed 's/^/      /'
            rm -f abuseipdb_raw.csv
            continue
          fi

          # Success!
          echo "   ‚úÖ API Key #$KEY_NUM succeeded!"
          SUCCESS=true
          break
        done

        # Check if any key succeeded
        if [ "$SUCCESS" = false ]; then
          echo ""
          echo "‚ùå All API keys exhausted. Failed to download blacklist."
          echo "üí° Possible reasons:"
          echo "   - All keys have reached daily limit (5 downloads/day for free tier)"
          echo "   - Network issues or API service down"
          echo "   - Invalid API keys"
          exit 1
        fi

        echo ""
        echo "‚úÖ AbuseIPDB blacklist downloaded successfully"
        echo "üìä Total lines: $(wc -l < abuseipdb_raw.csv)"

    - name: üîÑ Convert CSV to Custom Format
      run: |
        echo "Converting CSV to custom format: ip,country_code,abuse_confidence_score"

        # Process CSV and extract required fields
        # Expected CSV format: ip,country_code,abuse_confidence_score,last_reported_at
        # Output format: ip,country_code,abuse_confidence_score

        # Skip header and process each line
        tail -n +2 abuseipdb_raw.csv | awk -F',' '{
          # Extract and clean fields
          ip = $1
          country_code = $2
          confidence = $3

          # Remove quotes and whitespace
          gsub(/"/, "", ip)
          gsub(/"/, "", country_code)
          gsub(/"/, "", confidence)
          gsub(/^[[:space:]]+|[[:space:]]+$/, "", ip)
          gsub(/^[[:space:]]+|[[:space:]]+$/, "", country_code)
          gsub(/^[[:space:]]+|[[:space:]]+$/, "", confidence)

          # Set default country code if empty
          if (country_code == "") country_code = "UNKNOWN"

          # Output in required format
          print ip "," country_code "," confidence
        }' > Data/abuseips.txt

        if [ ! -f Data/abuseips.txt ]; then
          echo "‚ùå Failed to create abuseips.txt"
          exit 1
        fi

        echo "‚úÖ Conversion completed successfully"
        echo "üìä Total IPs processed: $(wc -l < Data/abuseips.txt)"
        echo ""
        echo "üìã Sample of first 5 entries:"
        head -5 Data/abuseips.txt

        # Cleanup temporary file
        rm -f abuseipdb_raw.csv

    - name: üìä Verify Output File
      run: |
        echo "Verifying abuseips.txt format..."

        if [ ! -f Data/abuseips.txt ]; then
          echo "‚ùå abuseips.txt not found"
          exit 1
        fi

        # Check file has content
        line_count=$(wc -l < Data/abuseips.txt)
        if [ "$line_count" -lt 1 ]; then
          echo "‚ùå abuseips.txt is empty"
          exit 1
        fi

        echo "‚úÖ File verification passed"
        echo "üìà Statistics:"
        echo "   Total entries: $line_count"
        echo "   File size: $(du -h Data/abuseips.txt | cut -f1)"

        # Show country distribution (top 10)
        echo ""
        echo "üåç Top 10 countries by IP count:"
        cut -d',' -f2 Data/abuseips.txt | sort | uniq -c | sort -rn | head -10

        # Show confidence score distribution
        echo ""
        echo "üìä Confidence score ranges:"
        echo "   75-84: $(awk -F',' '$3 >= 75 && $3 < 85' Data/abuseips.txt | wc -l)"
        echo "   85-94: $(awk -F',' '$3 >= 85 && $3 < 95' Data/abuseips.txt | wc -l)"
        echo "   95-100: $(awk -F',' '$3 >= 95' Data/abuseips.txt | wc -l)"

    - name: üì§ Commit and Push Changes
      if: ${{ success() }}
      run: |
        git config --global user.name "Github Actions"
        git config --global user.email "actions@github.com"

        # Add the blacklist file
        git add Data/abuseips.txt

        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "‚ÑπÔ∏è No changes to commit - blacklist is up to date"
        else
          # Get current timestamp
          timestamp=$(date -u +"%Y-%m-%d %H:%M UTC")

          git commit -m "üö´ Update AbuseIPDB blacklist - ${timestamp}"
          git push origin main
          echo "‚úÖ Successfully updated AbuseIPDB blacklist"
        fi
      shell: bash